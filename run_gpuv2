#!/bin/bash

if [ -z "$1" ]
  then echo "Please provide the name of the game, e.g.  ./run_cpu breakout "; exit 0
fi

md=`date +%m%d $md`
ENV=$1
FRAMEWORK="alewrap"		# name of training framework

save_frames=0
new_net=false
load_weights=0
load_net_kernels=0
weights_src="__"
netfile="\"convnet_paper1\""
for i in "$@" ; do
echo $i
    if [[ $i == "-sf" ]] ; then		# store frames
	save_frames=1
    fi
    if [[ $i == "-lw" ]] ; then		# load weights
	load_weights=1
	weights_src="\"../stored_kernels/kernels_net_ms_pacman_0419.t7\""
    fi
    if [[ $i == "-ln" ]] ; then		# load trained network
	netfile="\"/tmp/trained_networks/DQN3_0_1_"$1"_FULL_Y_0407.t7\""
    fi
    if [[ $i == "-lnk" ]] ; then		# load network with trained kernels
	load_net_kernels=1
    fi
done
#echo $save_frames $new_net $load_weights

game_path=$PWD"/roms/"		# path to environment file (ROM)
env_params="useRGB=true"	# string of environment parameters
agent="NeuralQLearner"		# name of the file to use
n_replay=1
update_freq=4
actrep=4			# how many times to repeat action
discount=0.99
seed=1				# fixed input seed for repeteable experiments
#learn_start=50000
learn_start=5000
pool_frms_type="\"max\""
pool_frms_size=2
initial_priority="false"
replay_memory=1000000
eps_end=0.1
eps_endt=replay_memory
lr=0.00025
agent_type="DQN3_0_1"
preproc_net="\"net_downsample_2x_full_y\""
agent_name=$agent_type"_"$1"_FULL_Y"	# filename used for saving network
state_dim=7056
ncols=1

trained_kernels_net="\"../stored_kernels/kernels_net_ms_pacman_0505.t7\""
#trained_kernels_net="\"\""

agent_params="lr="$lr",trained_kernels_net="$trained_kernels_net",load_net_kernels="$load_net_kernels",ep=1,ep_end="$eps_end",ep_endt="$eps_endt",discount="$discount",hist_len=4,learn_start="$learn_start",replay_memory="$replay_memory",update_freq="$update_freq",n_replay="$n_replay",network="$netfile",preproc="$preproc_net",state_dim="$state_dim",minibatch_size=32,rescale_r=1,ncols="$ncols",bufferSize=512,valid_size=500,target_q=10000,clip_delta=1,min_reward=-1,max_reward=1,save_frames="$save_frames",load_weights="$load_weights",weights_src="$weights_src		# string of the agent parameters
steps=50000000			# number of training steps to perform
eval_freq=250000		# frequency of greedy evaluation
eval_steps=125000		# number of evaluation steps
prog_freq=10000			# saves the agent network in a separate file
save_freq=125000		# the model is saved every save_freq steps
gpu=0				# gpu flag
random_starts=30		# play action 0 between 1 and random starts number of times at the start of each training episode
pool_frms="type="$pool_frms_type",size="$pool_frms_size		# string of frame pooling parameters
num_threads=192
display=0			# 1 to enable display
store_src="/tmp/trained_networks/"

args="-framework $FRAMEWORK -game_path $game_path -name $agent_name -env $ENV -env_params $env_params -agent $agent -agent_params $agent_params -steps $steps -eval_freq $eval_freq -eval_steps $eval_steps -prog_freq $prog_freq -save_freq $save_freq -actrep $actrep -gpu $gpu -random_starts $random_starts -pool_frms $pool_frms -seed $seed -threads $num_threads -display $display -store_src $store_src"
#echo $args

echo $agent_params

mkdir "/tmp/trained_networks"
#path="../trained_networks/"$1"_log_"$md
path="/tmp/trained_networks/"$1"_log_"$md
echo $path
cd dqn
if [ display ]; then 
	../torch/bin/qlua train_agent.lua $args 2>&1 | tee $path;
else
	../torch/bin/luajit train_agent.lua $args 2>&1 | tee $path;
fi

